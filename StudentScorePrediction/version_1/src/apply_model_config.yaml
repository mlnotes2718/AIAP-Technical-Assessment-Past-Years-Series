# apply_model_config.yaml

# This program is to pick the best pkl file and apply to the test dataset.

#######################################################################################
### User Guide:                                                                  ######
#######################################################################################
### There are 5 main configurations
### They are BEST_MODELS_PKL, BEST_MODELS_LIST, MODELS and PARAMS
### BEST_MODELS_PKL : This is where we choose the best model and use the pkl file stored
### in the pkl folder.
### BEST_MODELS_LIST : We use this list to decide which model we want to customized
### MODELS : Use this setting to construct the pipeline for each model.
### PARAMS : Use this setting to define which parameters to run for each model. This is
### no grid search. So please use one setting for each parameter.
###
### This will be the first time we make use of the test dataset. 
### 
#######################################################################################

#############################################################################
### Settings Parameters
#############################################################################

# Enter the model to use pkl file
#BEST_MODELS_PKL : []
#BEST_MODELS_PKL : ['polynomial', 'ridge', 'decision_tree', 'knn_regressor', 'svr', 'rf_regressor', 'gb_regressor', 'xgboost']
BEST_MODELS_PKL : ['ridge', 'decision_tree']

# Enter the model for manual configuration
#BEST_MODELS_LIST : []
#BEST_MODELS_LIST : ['polynomial', 'ridge', 'decision_tree', 'knn_regressor', 'svr', 'rf_regressor', 'gb_regressor', 'xgboost']
BEST_MODELS_LIST : ['gb_regressor', 'xgboost']


# Define models pipelines that include polynomial features and scaling.
# For feature scaling we have StandardScaler and MinMaxScaler
MODELS : 
  'polynomial':
    - 'poly': PolynomialFeatures
    - 'scaler': StandardScaler
    - 'polynomial': LinearRegression
  'ridge':
    - 'poly': PolynomialFeatures
    - 'scaler': StandardScaler
    - 'ridge': Ridge
  'decision_tree':
    - 'decision_tree': DecisionTreeRegressor
  'knn_regressor':
    - 'poly': PolynomialFeatures
    - 'scaler': StandardScaler
    - 'knn_regressor': KNeighborsRegressor        
  'svr':
    - 'poly': PolynomialFeatures
    - 'scaler': StandardScaler
    - 'svr': SVR       
  'rf_regressor': 
    - 'rf_regressor': RandomForestRegressor
  'gb_regressor': 
    - 'gb_regressor': GradientBoostingRegressor
  'xgboost': 
    - 'scaler': StandardScaler
    - 'xgboost': XGBRegressor



# Define hyperparameters for each model, including polynomial degrees
# THIS IS NOT GRID SEARCH, USE ONE SETTINGS ONLY
PARAMS : {
    'polynomial': {
        'poly__degree': 2,              
    },
    'ridge': {
        'poly__degree': 2,             
        'ridge__alpha': 0.05,
        'ridge__solver': 'svd'
    },
    'decision_tree': {
        'decision_tree__max_depth': 5,
        'decision_tree__min_samples_split': 100,
        'decision_tree__min_samples_leaf': 1
    },
    'knn_regressor': {
        'poly__degree': 2,
        'knn_regressor__n_neighbors': 25,
        'knn_regressor__weights': 'distance',
        'knn_regressor__p': 1
    },
    'svr': {
        'poly__degree': 2,
        'svr__kernel': 'linear',
        'svr__C': 0.1,
        'svr__epsilon': 0.1,
        'svr__gamma': 0.00001
    },
    'rf_regressor':{
        'rf_regressor__n_estimators': 1000,
        'rf_regressor__max_depth': 50,
        'rf_regressor__min_samples_split': 10,
        'rf_regressor__min_samples_leaf': 1,
        'rf_regressor__bootstrap': True        
    },
    'gb_regressor':{
        'gb_regressor__n_estimators': 500,
        'gb_regressor__learning_rate': 0.05,
        'gb_regressor__max_depth': 5,
        'gb_regressor__min_samples_split': 10,
        'gb_regressor__min_samples_leaf': 1,
        'gb_regressor__subsample': 1.0,
        'gb_regressor__loss': 'squared_error'        
    },
    'xgboost': {
        "xgboost__n_estimators": 650,
        "xgboost__learning_rate": 0.01,
        "xgboost__max_depth": 10,
        "xgboost__subsample": 0.5,
        "xgboost__colsample_bytree": 1.0,
        "xgboost__min_child_weight": 1
    }
}

